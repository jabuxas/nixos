# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."dashdot-dash" = {
    image = "mauricenino/dashdot";
    environment = {
      "DASHDOT_ENABLE_CPU_TEMPS" = "true";
      "DASHDOT_FS_DEVICE_FILTER" = "mmcblk0boot0,mmcblk0boot1";
      "DASHDOT_SHOW_HOST" = "true";
      "DASHDOT_WIDGET_LIST" = "os,cpu,storage,ram,network";
    };
    volumes = [
      "/:/mnt/host:ro"
    ];
    ports = [
      "83:3001/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=dash"
      "--network=dashdot_default"
      "--privileged"
    ];
  };
  systemd.services."docker-dashdot-dash" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-dashdot_default.service"
    ];
    requires = [
      "docker-network-dashdot_default.service"
    ];
    partOf = [
      "docker-compose-dashdot-root.target"
    ];
    wantedBy = [
      "docker-compose-dashdot-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-dashdot_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f dashdot_default";
    };
    script = ''
      docker network inspect dashdot_default || docker network create dashdot_default
    '';
    partOf = [ "docker-compose-dashdot-root.target" ];
    wantedBy = [ "docker-compose-dashdot-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-dashdot-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
