# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."calibre-calibre-web-automated-book-downloader" = {
    image = "ghcr.io/calibrain/calibre-web-automated-book-downloader:latest";
    environment = {
      "APP_ENV" = "prod";
      "BOOK_LANGUAGE" = "en";
      "CWA_DB_PATH" = "/auth/app.db";
      "FLASK_PORT" = "8084";
      "GID" = "100";
      "LOG_LEVEL" = "info";
      "TZ" = "America/Sao_Paulo";
      "UID" = "1000";
      "USE_BOOK_TITLE" = "true";
    };
    volumes = [
      "/data/calibre/book-ingest:/cwa-book-ingest:rw"
      "/data/calibre/config/app.db:/auth/app.db:ro"
    ];
    ports = [
      "8084:8084/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=calibre-web-automated-book-downloader"
      "--network=calibre_default"
    ];
  };
  systemd.services."docker-calibre-calibre-web-automated-book-downloader" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-calibre_default.service"
    ];
    requires = [
      "docker-network-calibre_default.service"
    ];
    partOf = [
      "docker-compose-calibre-root.target"
    ];
    wantedBy = [
      "docker-compose-calibre-root.target"
    ];
  };
  virtualisation.oci-containers.containers."calibre-web-automated" = {
    image = "crocodilestick/calibre-web-automated:latest";
    environment = {
      "PGID" = "1000";
      "PUID" = "1000";
      "TZ" = "America/Sao_Paulo";
    };
    volumes = [
      "/data/calibre/book-ingest:/cwa-book-ingest:rw"
      "/data/calibre/calibre-library:/calibre-library:rw"
      "/data/calibre/calibre-plugins:/config/.config/calibre/plugins:rw"
      "/data/calibre/config:/config:rw"
    ];
    ports = [
      "8083:8083/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=calibre-web-automated"
      "--network=calibre_default"
    ];
  };
  systemd.services."docker-calibre-web-automated" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-calibre_default.service"
    ];
    requires = [
      "docker-network-calibre_default.service"
    ];
    partOf = [
      "docker-compose-calibre-root.target"
    ];
    wantedBy = [
      "docker-compose-calibre-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-calibre_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f calibre_default";
    };
    script = ''
      docker network inspect calibre_default || docker network create calibre_default
    '';
    partOf = [ "docker-compose-calibre-root.target" ];
    wantedBy = [ "docker-compose-calibre-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-calibre-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
